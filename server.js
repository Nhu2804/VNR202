import express from "express";
import { createServer } from "http";
import { Server } from "socket.io";
import crypto from "crypto";
import fs from "fs";
import path from "path";

const app = express();
const server = createServer(app);
const io = new Server(server);

app.use(express.static("public"));

// ‚úÖ 1Ô∏è‚É£ ƒê·ªçc file map theo ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi ƒë·ªÉ tr√°nh l·ªói khi ch·∫°y t·ª´ th∆∞ m·ª•c kh√°c
const mapPath = path.join(process.cwd(), "public", "maps", "map1.json");

// ‚úÖ 2Ô∏è‚É£ ƒê·ªçc v√† parse JSON map Tiled
let mapData;
try {
  const fileContent = fs.readFileSync(mapPath, "utf8");
  mapData = JSON.parse(fileContent);
} catch (err) {
  console.error("‚ùå L·ªói ƒë·ªçc map1.json:", err);
  process.exit(1);
}

// ‚úÖ 3Ô∏è‚É£ L·∫•y k√≠ch th∆∞·ªõc th·ª±c c·ªßa map (theo s·ªë √¥ v√† k√≠ch th∆∞·ªõc m·ªói tile)
const TILE_W = mapData.tilewidth || 32;
const TILE_H = mapData.tileheight || 32;
const WORLD_WIDTH = mapData.width * TILE_W;
const WORLD_HEIGHT = mapData.height * TILE_H;
const MIN_DISTANCE_FOR_RESPAWN = 150;

console.log(`‚úÖ WORLD SIZE: ${WORLD_WIDTH}x${WORLD_HEIGHT} (${mapData.width}x${mapData.height} tiles)`);

let rooms = {};

// ‚úÖ ƒê·ªçc d·ªØ li·ªáu tr·∫Øc nghi·ªám c·ªßa 2 map
const dataDir = path.join(process.cwd(), "public", "data");

function loadMapData(mapName) {
  const filePath = path.join(dataDir, `${mapName}.json`);
  try {
    const content = fs.readFileSync(filePath, "utf8");
    console.log(`‚úÖ Loaded ${mapName}.json`);
    return JSON.parse(content);
  } catch (err) {
    console.error(`‚ùå L·ªói ƒë·ªçc ${mapName}.json:`, err);
    return { silver: [], gold: [] };
  }
}

// ü™Ñ Chuy·ªÉn Markdown (**) th√†nh HTML <b>...</b>
function convertMarkdownBold(obj) {
  if (Array.isArray(obj)) {
    return obj.map(o => convertMarkdownBold(o));
  } else if (typeof obj === "object" && obj !== null) {
    const newObj = {};
    for (const [k, v] of Object.entries(obj)) {
      if (typeof v === "string") {
        // thay **bold** th√†nh <b>bold</b>
        newObj[k] = v.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>");
      } else {
        newObj[k] = convertMarkdownBold(v);
      }
    }
    return newObj;
  }
  return obj;
}


const treasureData = {
  map1: convertMarkdownBold(loadMapData("map1")),
  map2: convertMarkdownBold(loadMapData("map2")),
};


// ============================================================
// üìè ƒê·ªçc k√≠ch th∆∞·ªõc ri√™ng c·ªßa map1 v√† map2  üëá  TH√äM ·ªû ƒê√ÇY
// ============================================================
function loadMapDimensions(mapFile) {
  try {
    const json = JSON.parse(fs.readFileSync(mapFile, "utf8"));
    return {
      width: json.width * (json.tilewidth || 32),
      height: json.height * (json.tileheight || 32),
    };
  } catch (err) {
    console.error("‚ùå L·ªói ƒë·ªçc map:", mapFile, err);
    return { width: 1280, height: 960 };
  }
}

const MAP_SIZES = {
  map1: loadMapDimensions(path.join(process.cwd(), "public/maps/map1.json")),
  map2: loadMapDimensions(path.join(process.cwd(), "public/maps/map2.json")),
};

console.log("‚úÖ MAP SIZES:", MAP_SIZES);

// ===========================================================
// ü™ô T·∫†O V√Ä H·ªíI SINH R∆Ø∆†NG ‚Äî RANDOM KH√îNG D√çNH NHAU
// ===========================================================

function generateGridTreasures(mapName = "map1") {
  const { width: WORLD_WIDTH, height: WORLD_HEIGHT } = MAP_SIZES[mapName];
  console.log(`üéÅ Generating treasures for ${mapName} (${WORLD_WIDTH}x${WORLD_HEIGHT})`);

  const treasures = [];
  const { silver = [], gold = [] } = treasureData[mapName];
  const SILVER_COUNT = 15;
  const GOLD_COUNT = 5;
  const baseDistance = 150;
  const scaleFactor = Math.sqrt((WORLD_WIDTH * WORLD_HEIGHT) / (1280 * 1184)); // t·ªâ l·ªá so v·ªõi map1
  const MIN_DISTANCE = baseDistance * scaleFactor; // t·ª± gi√£n theo di·ªán t√≠ch map

  const PADDING = 80;

  // ü©∂ Sinh 15 r∆∞∆°ng b·∫°c
  let attempts = 0;
  while (treasures.length < SILVER_COUNT && attempts < 2000) {
    const { width: WORLD_WIDTH, height: WORLD_HEIGHT } = MAP_SIZES[mapName];
    const x = PADDING + Math.random() * (WORLD_WIDTH - 2 * PADDING);
    const y = PADDING + Math.random() * (WORLD_HEIGHT - 2 * PADDING);
    const tooClose = treasures.some(t => Math.hypot(t.x - x, t.y - y) < MIN_DISTANCE);
    if (!tooClose) {
      const q = silver[treasures.length % silver.length] || { info: "R∆∞∆°ng b·∫°c", question: "", options: [], correct: 0, points: 10 };
      treasures.push({ id: crypto.randomUUID(), type: "silver", x, y, opened: false, ...q, points: 10 });
    }
    attempts++;
  }

  // üíõ Sinh 5 r∆∞∆°ng v√†ng
  attempts = 0;
  while (treasures.length < SILVER_COUNT + GOLD_COUNT && attempts < 2000) {
    const { width: WORLD_WIDTH, height: WORLD_HEIGHT } = MAP_SIZES[mapName];
    const x = PADDING + Math.random() * (WORLD_WIDTH - 2 * PADDING);
    const y = PADDING + Math.random() * (WORLD_HEIGHT - 2 * PADDING);
    const tooClose = treasures.some(t => Math.hypot(t.x - x, t.y - y) < MIN_DISTANCE);
    if (!tooClose) {
      const q = gold[(treasures.length - SILVER_COUNT) % gold.length] || { info: "R∆∞∆°ng v√†ng", question: "", options: [], correct: 0, points: 20 };
      treasures.push({ id: crypto.randomUUID(), type: "gold", x, y, opened: false, ...q, points: 20 });
    }
    attempts++;
  }

  console.log(`‚úÖ Generated ${treasures.length} treasures for ${mapName}`);
  return treasures;
}



function respawnSingleTreasure(existingTreasures = [], mapName = "map1") {
  const { width: WORLD_WIDTH, height: WORLD_HEIGHT } = MAP_SIZES[mapName];
  const { silver = [], gold = [] } = treasureData[mapName];
  const PADDING = 80;
  const baseDistance = 150;

  const scaleFactor = Math.sqrt((WORLD_WIDTH * WORLD_HEIGHT) / (1280 * 1184)); // t·ªâ l·ªá so v·ªõi map1
  const MIN_DISTANCE = baseDistance * scaleFactor; // t·ª± gi√£n theo di·ªán t√≠ch map

  let attempts = 0;

  while (attempts < 200) {
    const x = PADDING + Math.random() * (WORLD_WIDTH - 2 * PADDING);
    const y = PADDING + Math.random() * (WORLD_HEIGHT - 2 * PADDING);
    const tooClose = existingTreasures.some(t => Math.hypot(t.x - x, t.y - y) < MIN_DISTANCE);
    if (!tooClose) {
      const isGold = Math.random() < 0.35;
      const q = (isGold ? gold : silver)[Math.floor(Math.random() * (isGold ? gold.length : silver.length))];
      return { id: crypto.randomUUID(), type: isGold ? "gold" : "silver", x, y, opened: false, ...q };
    }
    attempts++;
  }
  console.warn("‚ö†Ô∏è Respawn failed (too crowded)");
  return null;
}


// ===================================================
// üéØ L∆∞u ti·∫øn ƒë·ªô t·ª´ng ph√≤ng (progress bar %)
// ===================================================
let progressByRoom = {};
// Theo d√µi c√°c c√¢u h·ªèi ƒë√£ d√πng ri√™ng t·ª´ng ng∆∞·ªùi ch∆°i
let usedQuestionsByPlayer = {};


io.on("connection", (socket) => {
  console.log("üß© Connected:", socket.id);

  socket.on("createRoom", (callback) => {
    const pin = Math.floor(10000 + Math.random() * 90000).toString();
    rooms[pin] = { hostId: socket.id, players: [], started: false, treasures: [], currentMap: "map1" };
    socket.join(pin);
    callback(pin);
  });

  // ===== B·∫ÆT ƒê·∫¶U V√ôNG CODE M·ªöI TH√äM V√ÄO =====
  socket.on("checkRoomPin", (pin, callback) => {
    const room = rooms[pin];
    if (!room) {
      return callback({ exists: false, error: "‚ùå Ph√≤ng kh√¥ng t·ªìn t·∫°i!" });
    }
    if (room.started) {
      return callback({ exists: false, error: "‚è≥ Ph√≤ng ƒë√£ b·∫Øt ƒë·∫ßu, kh√¥ng th·ªÉ v√†o!" });
    }
    callback({ exists: true });
  });

  // üÜï Khi host ch·ªçn ng∆∞·ªùi ch∆°i ƒë·ªÉ theo d√µi
  socket.on("setFollowTarget", ({ pin, targetId }) => {
    const room = rooms[pin];
    if (!room || socket.id !== room.hostId) return;
    room.followTarget = targetId || null;
    io.to(room.hostId).emit("followTargetUpdate", targetId || null);
  });

  // ===== K·∫æT TH√öC V√ôNG CODE M·ªöI TH√äM V√ÄO =====

  socket.on("joinRoom", ({ pin, name }, callback) => {
    const room = rooms[pin];
    if (!room) return callback({ error: "‚ùå Ph√≤ng kh√¥ng t·ªìn t·∫°i!" });
    if (room.started) return callback({ error: "‚è≥ Ph√≤ng ƒë√£ b·∫Øt ƒë·∫ßu!" });
    if (room.players.some(p => p.name === name)) {
      return callback({ error: "T√™n n√†y ƒë√£ ƒë∆∞·ª£c d√πng trong ph√≤ng!" });
    }

    // üß© Danh s√°ch sprite nh√¢n v·∫≠t (ƒë√£ c√≥ trong /public/characters)
    const characterSprites = [
      "characters/character_1.png",
      "characters/character_2.png",
      "characters/character_3.png",
      "characters/character_4.png",
      "characters/character_5.png",
      "characters/character_6.png",
      "characters/character_7.png",
      "characters/character_8.png",
      "characters/character_9.png",
      "characters/character_10.png",
    ];

    // Random nh√¢n v·∫≠t
    const randomSprite = characterSprites[Math.floor(Math.random() * characterSprites.length)];

    const player = {
      id: socket.id,
      name,
      score: 0,
      x: Math.random() * (WORLD_WIDTH - 100) + 50,
      y: Math.random() * (WORLD_HEIGHT - 100) + 50,
      sprite: randomSprite // üß† G√°n ƒë∆∞·ªùng d·∫´n sprite
    };

    room.players.push(player);
    socket.join(pin);
    io.to(pin).emit("updatePlayers", room.players);
    callback({ success: true, sprite: randomSprite });
  });

  socket.on("startGame", (pin) => {
    const room = rooms[pin];
    if (!room || socket.id !== room.hostId) return;
    room.started = true;
    room.currentMap = "map1"; // ‚úÖ th√™m d√≤ng n√†y
    // <--- S·ª¨ D·ª§NG H√ÄM R·∫¢I R∆Ø∆†NG ƒê·ªÄU --->
    room.treasures = generateGridTreasures("map1");
    io.to(pin).emit("updateTreasures", room.treasures);
    io.to(pin).emit("startGame");
    io.to(pin).emit("updatePlayers", room.players);

    // const timer = setInterval(() => {
    //   if (!room || !room.started) return clearInterval(timer);
    //   room.timeLeft--;
    //   io.to(pin).emit("timerUpdate", room.timeLeft);
    //   if (room.timeLeft <= 0) {
    //     room.started = false;
    //     clearInterval(timer);
    //     const ranking = [...room.players].sort((a, b) => b.score - a.score);
    //     io.to(pin).emit("endGame", ranking);
    //     delete rooms[pin];
    //   }
    // }, 1000);
  });

  socket.on("movePlayer", ({ pin, x, y }) => {
    const room = rooms[pin];
    if (!room) return;
    const player = room.players.find(p => p.id === socket.id);
    if (!player) return;

    player.x = x;
    player.y = y;

    // üÜï N·∫øu ng∆∞·ªùi n√†y ƒëang b·ªã host theo d√µi ‚Üí kh√¥ng g·ª≠i l·∫°i cho host
    if (room.followTarget === socket.id) {
      socket.to(pin).emit("playerMoved", { id: player.id, x, y });
    } else {
      // B√¨nh th∆∞·ªùng: g·ª≠i cho t·∫•t c·∫£ (bao g·ªìm host)
      socket.to(pin).emit("playerMoved", { id: player.id, x, y });
    }
  });


  socket.on("openTreasure", ({ pin, treasureId }) => {
    const room = rooms[pin];
    if (!room) return;

    const t = room.treasures.find(tr => tr.id === treasureId);
    if (!t || t.opened) return;

    // ‚úÖ ƒê√°nh d·∫•u ƒë√£ m·ªü
    t.opened = true;
    io.to(pin).emit("treasureOpened", treasureId);

    // ‚úÖ M·ªói ng∆∞·ªùi ch∆°i c√≥ danh s√°ch c√¢u h·ªèi ri√™ng
    const playerId = socket.id;
    const mapName = room.currentMap;
    const isGold = t.type === "gold";

    // L·∫•y danh s√°ch c√¢u h·ªèi ph√π h·ª£p map v√† lo·∫°i r∆∞∆°ng
    const pool = isGold ? treasureData[mapName].gold : treasureData[mapName].silver;

    // N·∫øu ng∆∞·ªùi ch∆°i ch∆∞a c√≥ b·ªô c√¢u h·ªèi ri√™ng th√¨ t·∫°o m·ªõi
    if (!usedQuestionsByPlayer[playerId]) {
      usedQuestionsByPlayer[playerId] = { silver: new Set(), gold: new Set() };
    }

    const usedSet = isGold ? usedQuestionsByPlayer[playerId].gold : usedQuestionsByPlayer[playerId].silver;

    // ‚úÖ L·∫•y ch·ªâ s·ªë c√¢u h·ªèi ch∆∞a d√πng
    const allIndices = pool.map((_, i) => i);
    const available = allIndices.filter(i => !usedSet.has(i));
    if (available.length === 0) usedSet.clear(); // n·∫øu h·∫øt c√¢u th√¨ reset
    const pick =
      available.length > 0
        ? available[Math.floor(Math.random() * available.length)]
        : Math.floor(Math.random() * pool.length);
    usedSet.add(pick);

    const q = pool[pick];

    // ‚úÖ G·ª≠i ri√™ng c√¢u h·ªèi cho ng∆∞·ªùi ch∆°i m·ªü r∆∞∆°ng
    socket.emit("showQuestion", {
      treasureId,
      type: t.type,
      info: q.info,
      question: q.question,
      options: q.options,
      correct: q.correct,
      points: isGold ? 20 : 10,
    });

    // üîÅ Sau 3s h·ªìi sinh r∆∞∆°ng (nh∆∞ng c√¢u h·ªèi kh√¥ng reset)
    setTimeout(() => {
      if (!room) return;
      room.treasures = room.treasures.filter(tr => tr.id !== treasureId);
      const newTreasure = respawnSingleTreasure(room.treasures, room.currentMap);
      if (newTreasure) {
        room.treasures.push(newTreasure);
        io.to(pin).emit("updateTreasures", room.treasures);
      }
    }, 3000);
  });


  socket.on("updateScore", ({ pin, delta }) => {
    const room = rooms[pin];
    if (!room) return;
    const player = room.players.find(p => p.id === socket.id);
    if (player) player.score += delta;
    io.to(pin).emit("updatePlayers", room.players);
  });

  // ===================================================
  // üéØ TƒÇNG TI·∫æN ƒê·ªò PH√íNG (progress bar)
  // ===================================================


  socket.on("increaseProgress", ({ pin, amount }) => {
    if (!progressByRoom[pin]) progressByRoom[pin] = 0;
    progressByRoom[pin] += amount;
    if (progressByRoom[pin] > 100) progressByRoom[pin] = 100;

    // G·ª≠i ti·∫øn ƒë·ªô % cho t·∫•t c·∫£ ng∆∞·ªùi trong ph√≤ng
    io.to(pin).emit("progressUpdate", progressByRoom[pin]);
  });


  socket.on("disconnect", () => {
    for (const pin in rooms) {
      const room = rooms[pin];
      if (socket.id === room.hostId) {
        io.to(pin).emit("endGame", [...room.players].sort((a, b) => b.score - a.score));
        delete rooms[pin];
        delete progressByRoom[pin];
        console.log(`‚ùå Host r·ªùi ph√≤ng ${pin} ‚Äî ƒë√≥ng ph√≤ng`);
        return;
      }

      const idx = room.players.findIndex(p => p.id === socket.id);
      if (idx !== -1) {
        room.players.splice(idx, 1);
        io.to(pin).emit("updatePlayers", room.players);
        return;
      }
    }  
  });


  // ===================================================
  // üß≠ Khi host b·∫•m ‚ÄúTi·∫øp t·ª•c‚Äù sau khi ho√†n th√†nh Map 1
  // ===================================================
  socket.on("hostContinueMap2", (pin) => {
    const room = rooms[pin];
    if (!room || socket.id !== room.hostId) return;

    console.log(`‚û°Ô∏è Ph√≤ng ${pin}: Host chuy·ªÉn sang Map 2`);

    // Reset ti·∫øn ƒë·ªô
    progressByRoom[pin] = 0;
    room.currentMap = "map2"; 

    // T·∫°o r∆∞∆°ng m·ªõi cho map2
    room.treasures = generateGridTreasures("map2");

    // G·ª≠i d·ªØ li·ªáu m·ªõi cho to√†n b·ªô ng∆∞·ªùi ch∆°i
    io.to(pin).emit("progressUpdate", 0);
    io.to(pin).emit("updateTreasures", room.treasures);
    io.to(pin).emit("switchMap2");
  });


  // ===================================================
  // üèÅ Khi host b·∫•m ‚ÄúXem b·∫£ng x·∫øp h·∫°ng‚Äù (k·∫øt th√∫c Map 2)
  // ===================================================
  socket.on("hostEndGame", (pin) => {
    const room = rooms[pin];
    if (!room || socket.id !== room.hostId) return;

    console.log(`üèÅ Ph√≤ng ${pin}: Game k·∫øt th√∫c!`);
    const ranking = [...room.players].sort((a, b) => b.score - a.score);

    io.to(pin).emit("endGame", ranking);
    delete rooms[pin];
    delete progressByRoom[pin];
  });


});
// ‚úÖ Cho ph√©p truy c·∫≠p c√°c file tƒ©nh trong th∆∞ m·ª•c public
app.use(express.static(path.join(process.cwd(), "public")));

// ‚úÖ N·∫øu ng∆∞·ªùi d√πng truy c·∫≠p domain ch√≠nh, tr·∫£ v·ªÅ file index.html
app.get("/", (req, res) => {
  res.sendFile(path.join(process.cwd(), "public", "index.html"));
});

server.listen(3000, () => console.log("üöÄ Server ch·∫°y t·∫°i http://localhost:3000"));